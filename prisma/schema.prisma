generator client {
  provider      = "prisma-client-js"
  output        = "./generated/client"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String               @id @default(uuid())
  username     String               @unique
  email        String               @unique
  password     String
  first_name   String               @default("")
  last_name    String               @default("")
  gender       Gender               @relation(fields: [genderId], references: [id])
  genderId     Int                  @default(3)
  avatar       String               @default("")
  country      String               @default("")
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  isBanned     Boolean              @default(false)
  role         UserRole[]
  provider     Provider?
  following    Following[]
  Banned       Bans[]
  books        UserBooks[]
  shelfs       Shelf[]
  reviews      Reviews[]
  reviewsLikes ReviewsLikeDislike[]
  token        Token[]
}

enum UserRole {
  ADMIN
  USER
}

enum Provider {
  GOOGLE
  FACEBOOK
}

model Token {
  token     String   @unique
  exp       DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  userAgent String
}

model ResetPassword {
  id        String   @id @default(uuid())
  email     String
  token     String
  createdAt DateTime @default(now())
}

model Shelf {
  id       String      @id @default(uuid())
  name     String
  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  isCustom Boolean     @default(true)
  books    UserBooks[]
}

model Gender {
  id   Int    @id @default(autoincrement())
  name String
  user User[]
}

model Following {
  id          String @id @default(uuid())
  userId      String
  following   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  followingId String
}

model Bans {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  bannedAt   DateTime  @default(now())
  unbannedAt DateTime?
  reason     String
}

model UserBooks {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  book      Book      @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    String
  status    Status
  addedAt   DateTime  @default(now())
  readEndAt DateTime?
  shelf     Shelf[]
}

enum Status {
  READ
  CURRENTLY_READING
  WANT_TO_READ
}

model Reviews {
  id        String               @id @default(uuid())
  book      Book                 @relation(fields: [bookId], references: [id], onDelete: Cascade)
  bookId    String
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  rating    Float
  title     String
  body      String
  createdAt DateTime             @default(now())
  updateAt  DateTime             @updatedAt
  likes     ReviewsLikeDislike[]
}

model ReviewsLikeDislike {
  id       String     @id @default(uuid())
  reviev   Reviews @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  reviewId String
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  isLike   Boolean
}

model Book {
  id                 String      @id @default(uuid())
  title              String
  authors            Author[]
  genres             Genre[]
  isbn               String      @unique
  publicationDate    DateTime
  numberOfPages      Int
  language           String
  image              String
  description        String
  publisher          Publisher   @relation(fields: [publisherId], references: [id])
  publisherId        String
  publicationCountry String
  averageRating      String      @default("0")
  binding            Binding[]
  awards             Awards[]
  users              UserBooks[]
  reviews            Reviews[]
}

enum Binding {
  HARDCOVER
  PAPERBACK
  EBOOK
}

model Awards {
  id          String   @id @default(uuid())
  name        String
  description String
  date        DateTime
  books       Book[]
}

model Publisher {
  id      String @id @default(uuid())
  name    String @unique
  books   Book[]
  Country String
}

model Genre {
  id          String  @id @default(uuid())
  name        String  @unique
  description String
  books       Book[]
  children    Genre[] @relation("genre-hierarchy")
  parent      Genre?  @relation("genre-hierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  parentId    String?
}

model Author {
  id          String   @id @default(uuid())
  books       Book[]
  firstName   String
  lastName    String
  dateOfBirth DateTime
  country     String
  image       String
  bio         String
}

model News {
  id          String   @id @default(uuid())
  title       String   @unique
  description String
  date        DateTime
}
